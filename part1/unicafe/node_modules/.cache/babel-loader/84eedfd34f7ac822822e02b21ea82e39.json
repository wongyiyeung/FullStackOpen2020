{"ast":null,"code":"var _jsxFileName = \"/Users/yiyeung/Desktop/helsinki fullstack course/FullStackOpen2020/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  handleClick,\n  text\n}) => {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, text);\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [average, setAverage] = useState(0.0);\n  const [positivePercentage, setPositivePercentage] = useState(0.0);\n\n  const handleGoodFeedback = (setter, value) => {\n    return () => {\n      value++;\n      total++;\n      setAverage((good - bad) / total);\n      setPositivePercentage(good / total * 100.0);\n      setter(value);\n      setTotal(total);\n    };\n  };\n\n  const handleFeedback = (setter, value) => {\n    return () => setter(value + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleGoodFeedback,\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleFeedback(setNeutral, neutral),\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleFeedback(setBad, bad),\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, \"Statistics\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, \"good \", good), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, \"neutral \", neutral), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, \"bad \", bad), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, \"all \", total), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"average \", average), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 3\n    }\n  }, \"positive \", positivePercentage));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/yiyeung/Desktop/helsinki fullstack course/FullStackOpen2020/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","handleClick","text","App","good","setGood","neutral","setNeutral","bad","setBad","total","setTotal","average","setAverage","positivePercentage","setPositivePercentage","handleGoodFeedback","setter","value","handleFeedback","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({handleClick, text}) => {\n  return (\n    <button onClick={handleClick}>{text}</button>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [total, setTotal] = useState(0);\n  const [average, setAverage] = useState(0.0);\n  const [positivePercentage, setPositivePercentage] = useState(0.0);\n\n  const handleGoodFeedback = (setter, value) => {\n    return () => {\n      value++;\n      total++;\n      setAverage((good-bad)/total);\n      setPositivePercentage(good/total*100.0);\n      setter(value);\n      setTotal(total);\n    }\n  }\n\n  const handleFeedback = (setter, value) => {\n    return () => setter(value+1);\n  }\n\n  return (\n    <div>\n    <h1>Give Feedback</h1>\n    <Button handleClick={handleGoodFeedback} text='good'/>\n    <Button handleClick={handleFeedback(setNeutral, neutral)} text='neutral'/>\n    <Button handleClick={handleFeedback(setBad, bad)} text='bad'/>\n    <h1>Statistics</h1>\n    <p>good {good}</p>\n    <p>neutral {neutral}</p>\n    <p>bad {bad}</p>\n    <p>all {total}</p>\n    <p>average {average}</p>\n  <p>positive {positivePercentage}</p>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}