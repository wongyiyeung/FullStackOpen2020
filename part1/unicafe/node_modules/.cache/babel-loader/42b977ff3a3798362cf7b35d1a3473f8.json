{"ast":null,"code":"var _jsxFileName = \"/Users/yiyeung/Desktop/helsinki fullstack course/FullStackOpen2020/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  handleClick,\n  text\n}) => {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, text);\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [average, setAverage] = useState(0.0);\n  const [positivePercentage, setPositivePercentage] = useState(0.0);\n\n  const handleFeedback = (newGood, newNeutral, newBad) => {\n    return (newGood, newNeutral, newBad) => {\n      setGood(good);\n      setNeutral(neutral);\n      setBad(bad);\n      let newTotal = total + 1;\n      setAverage((good - bad) / newTotal);\n      setPositivePercentage(good / newTotal * 100.0);\n      setTotal(newTotal);\n    };\n  };\n\n  const handleGoodFeedback = () => {\n    return () => {\n      let newGood = good + 1;\n      let newTotal = total + 1;\n      setGood(newGood);\n      setAverage((newGood - bad) / newTotal);\n      setPositivePercentage(newGood / newTotal * 100.0);\n      setTotal(newTotal);\n    };\n  };\n\n  const handleNeutralFeedback = () => {\n    return () => {\n      let newNeutral = neutral + 1;\n      let newTotal = total + 1;\n      setNeutral(newNeutral);\n      setAverage((good - bad) / newTotal);\n      setPositivePercentage(good / newTotal * 100.0);\n      setTotal(newTotal);\n    };\n  };\n\n  const handleBadFeedback = () => {\n    return () => {\n      let newBad = bad + 1;\n      let newTotal = total + 1;\n      setBad(newBad);\n      setAverage((good - newBad) / newTotal);\n      setPositivePercentage(good / newTotal * 100.0);\n      setTotal(newTotal);\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleGoodFeedback,\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleNeutralFeedback,\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleBadFeedback,\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, \"Statistics\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, \"good \", good), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, \"neutral \", neutral), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, \"bad \", bad), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, \"all \", total), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, \"average \", average), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, \"positive \", positivePercentage, \"%\"));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/yiyeung/Desktop/helsinki fullstack course/FullStackOpen2020/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","handleClick","text","App","good","setGood","neutral","setNeutral","bad","setBad","total","setTotal","average","setAverage","positivePercentage","setPositivePercentage","handleFeedback","newGood","newNeutral","newBad","newTotal","handleGoodFeedback","handleNeutralFeedback","handleBadFeedback","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({handleClick, text}) => {\n  return (\n    <button onClick={handleClick}>{text}</button>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [total, setTotal] = useState(0);\n  const [average, setAverage] = useState(0.0);\n  const [positivePercentage, setPositivePercentage] = useState(0.0);\n\n  const handleFeedback = (newGood, newNeutral, newBad) => {\n    return (newGood, newNeutral, newBad) => {\n      setGood(good);\n      setNeutral(neutral);\n      setBad(bad);\n      let newTotal = total + 1;\n      setAverage((good-bad)/newTotal);\n      setPositivePercentage(good/newTotal*100.0);\n      setTotal(newTotal);\n    }\n  }\n\n  const handleGoodFeedback = () => {\n    return () => {\n      let newGood = good+1;\n      let newTotal = total+1;\n      setGood(newGood);\n      setAverage((newGood-bad)/newTotal);\n      setPositivePercentage(newGood/newTotal*100.0);\n      setTotal(newTotal);\n    }\n  }\n\n  const handleNeutralFeedback = () => {\n    return () => {\n      let newNeutral = neutral+1;\n      let newTotal = total+1;\n      setNeutral(newNeutral);\n      setAverage((good-bad)/newTotal);\n      setPositivePercentage(good/newTotal*100.0);\n      setTotal(newTotal);\n    }\n  }\n\n  const handleBadFeedback = () => {\n    return () => {\n      let newBad = bad+1;\n      let newTotal = total+1;\n      setBad(newBad);\n      setAverage((good-newBad)/newTotal);\n      setPositivePercentage(good/newTotal*100.0);\n      setTotal(newTotal);\n    }\n  }\n\n  return (\n    <div>\n    <h1>Give Feedback</h1>\n    <Button handleClick={handleGoodFeedback} text='good'/>\n    <Button handleClick={handleNeutralFeedback} text='neutral'/>\n    <Button handleClick={handleBadFeedback} text='bad'/>\n    <h1>Statistics</h1>\n    <p>good {good}</p>\n    <p>neutral {neutral}</p>\n    <p>bad {bad}</p>\n    <p>all {total}</p>\n    <p>average {average}</p>\n    <p>positive {positivePercentage}%</p>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}